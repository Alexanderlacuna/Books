* Optimization
Bad designs produce unexpected consequences whereas good designs produce
unxpected benefits

** 1.4.1 Memoization

A technique of storing the results of expensive calculations so that the
result can be looked up instead of recalculated


#+BEGIN_SRC javascript


  const g = v => {
      for (var i=0; i <1000000 ; ++1) {
	  console.log("processing index",i) ;;makes the function impure
      }

      return v;
  }
#+END_SRC



#+BEGIN_SRC javascript
ut  ;;make it pure

  const gCache = {}
  const mg = v => {
      if (gCache["v"]  === undefined) {
	  const result = g(v);
	  gCache[v] result;
      }

      return g Cache[v]'
  }
#+END_SRC


** functional programming

1. All functions are Pure (no side effects)

2. All values are immutable  (no variables)

3. iteration is performed via recursion (no loops)




** high order functions vs first order functions


from the concept of passing functions as parameters and returning function as return values
we get high order functions the opposite is first order functions


nOTE COMPOSITION IS FROM RIGHT TO LEFT


fog(x) f after g


f: X-> Y  (domain X) to codomain Y

Y-> Z

h: X -> Z for all x in X




** 2.4.1. Point-free Notation

Point-free notation (or style) means that a Function is defined WITHOUT explicitly
mentioning one or more of its Parameters.




not_large:: int -> string

not large num ::  not (is Large num)

relook at curryign
